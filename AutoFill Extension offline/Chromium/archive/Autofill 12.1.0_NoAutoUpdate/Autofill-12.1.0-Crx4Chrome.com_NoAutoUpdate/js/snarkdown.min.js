/*! Based on https://github.com/developit/snarkdown */
!function(n,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(n=n||self).snarkdown=e()}(this,function(){var n={"":["<em>","</em>"],_:["<strong>","</strong>"],"*":["<strong>","</strong>"],"~":["<s>","</s>"],"-":["\n<hr>"],"=":["\n<hr>"]};function e(n){return n.replace(RegExp("^"+(n.match(/^(\t| )+/)||"")[0],"gm"),"")}function r(n){return(n+"").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}return function t(c,o){var a,l,g,p,s,u=/((?:^|\n+)(?:\n---+|\n===+|\* \*(?: \*)+)\n)|(?:^``` *(\w*)\n([\s\S]*?)\n```$)|((?:(?:^|\n+)(?:\t|  {2,}).+)+\n*)|((?:(?:^|\n)([>*+-]|\d+\.)\s+.*)+)|(?:!\[([^\]]*?)\]\(([^)]+?)\))|(\[)|(\](?:\(([^)]+?)\))?)|(?:(?:^|\n+)([^\s].*)\n(-{3,}|={3,})(?:\n+|$))|(?:(?:^|\n+)(#{1,6})\s*(.+)(?:\n+|$))|(?:`([^`].*?)`)|(  \n\n*|\n{2,}|__|\*\*|[_*]|~~)/gm,f=[],i=o||{},d="",h=0;function m(e){var r=n[e[1]||""],t=f[f.length-1]===e;return r?r[1]?(t?f.pop():f.push(e),r[0|t]):r[0]:e}function $(){for(var n="";f.length;)n+=m(f[f.length-1]);return n}for(c=c.replace(/^\[(.+?)\]:\s*(.+)$/gm,function(n,e,r){return i[e.toLowerCase()]=r,""}).replace(/^\n+|\n+$/g,"");g=u.exec(c);)l=c.substring(h,g.index),h=u.lastIndex,a=g[0],l.match(/[^\\](\\\\)*\\$/)||((s=g[3]||g[4])?a="<pre><code>"+e(r(s).replace(/^\n+|\n+$/g,"")).replace(/\n/g,"{{n}}")+"</code></pre>":(s=g[6])?(s.match(/\./)&&(g[5]=g[5].replace(/^\d+/gm,"")),p=t(e(g[5].replace(/^\s*[>*+.-]/gm,""))),">"===s?(s="blockquote",p=p.replace(/\n/g,"{{n}}")):(s=s.match(/\./)?"ol":"ul",p=p.replace(/^(.*)(\n|$)/gm,"<li>$1</li>")),a="\n<"+s+">"+p+"</"+s+">"):g[8]?a='<img src="'+r(g[8])+'" alt="'+r(g[7])+'">':g[10]?(d=d.replace("<a>",'<a href="'+r(g[11]||i[l.toLowerCase()])+'" target="_blank">'),a=$()+"</a>"):g[9]?a="<a>":g[12]||g[14]?a="\n<"+(s="h"+(g[14]?g[14].length:g[13]>"="?1:2))+">"+t(g[12]||g[15],i)+"</"+s+">\n":g[16]?a="<code>"+r(g[16])+"</code>":(g[17]||g[1])&&(a=m(g[17]||"--"))),d+=l,d+=a;return(d=(d+c.substring(h)+$()).replace(/^\n+|\n+$/g,"")).indexOf("<h")>-1&&(d=(d=(d=d.replace(/\n+((?!<(b|h|o|p|u)).+)/g,"\n<p>$1</p>")).replace(/\n{2,}/g,"\n")).replace(/{{n}}/g,"\n")),d}});
